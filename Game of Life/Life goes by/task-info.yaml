type: edu
custom_name: stage3
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage3Test;

    public class GameOfLifeTest extends GameOfLifeStage3Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeStage3Test.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.stage.BaseStageTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.Main

    abstract class GameOfLifeStage3Test : BaseStageTest<ClueWithChecker>(Main::class.java) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            // two times:
            return (5..MAX_SIZE).flatMap(::stage3Tests) + (5..MAX_SIZE).flatMap(::stage3Tests)
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }

        companion object {
            const val MAX_SIZE = 10
        }
    }

    fun stage3Tests(universeSize: Int): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest("$universeSize\n") { reply ->
                    @Suppress("FoldInitializerAndIfToElvis")
                    val generations = reply
                            .toLowerCase()
                            .lines()
                            .filter { it.isNotEmpty() }
                            .joinToString("\n")
                            .split("generation".toRegex())
                            .drop(1)
                            .map {
                                val lines = it.lines()
                                val (idString, aliveString) = lines
                                val map = lines.drop(2)

                                if (!map.canBeMap(universeSize)) {
                                    return@createDynamicFeedbackTest fail("Can't read map in:\n$it\n")
                                }

                                val id = intRegex.find(idString)?.groupValues?.firstOrNull()?.toInt()
                                if (id == null) {
                                    return@createDynamicFeedbackTest fail("Can't find generation ID:\n$it\n")
                                }

                                val alive = intRegex.find(aliveString)?.groupValues?.firstOrNull()?.toInt()
                                if (alive == null) {
                                    return@createDynamicFeedbackTest fail("Can't find alive count:\n$it\n")
                                }

                                val generation = Generation(id, alive, map)
                                val aliveOnMap = generation.aliveOnMap(universeSize)

                                if (aliveOnMap != alive) {
                                    return@createDynamicFeedbackTest fail(
                                            "Alive count is wrong ($alive expected, $aliveOnMap got):\n$it\n"
                                    )
                                }

                                return@map generation
                            }

                    if (generations.isEmpty()) {
                        return@createDynamicFeedbackTest fail("Your program doesn't output generations for size $universeSize")
                    }

                    if (generations.first().id != 1) {
                        return@createDynamicFeedbackTest fail("First generation has number ${generations.first().id}")
                    }

                    val diffs = generations.windowed(2)

                    diffs.forEach { (prev, next) ->
                        if (prev.id + 1 != next.id) {
                            return@createDynamicFeedbackTest fail("ID of the generation #${prev.id + 1} is wrong (${next.id})")
                        }

                        if (!prev.evolvesTo(next, universeSize)) {
                            return@createDynamicFeedbackTest fail("Wrong evolution from #${prev.id} to #${prev.id + 1}")
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }

    val intRegex = """(\d)+""".toRegex()

    fun List<String>.canBeMap(universeSize: Int): Boolean {
        if (this.size < universeSize) {
            return false
        }

        return this.take(universeSize).all { it.length >= universeSize }
    }

    data class Generation(val id: Int, val alive: Int, val map: List<String>) {
        fun aliveOnMap(universeSize: Int): Int {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) -> map[x][y] }
                    .count { it.isAlive() }
        }

        fun evolvesTo(other: Generation, universeSize: Int): Boolean {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) ->
                        if (map[x][y].isAlive()) {
                            if (aliveNeighbours(x, y, universeSize) in setOf(2, 3)) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        } else {
                            if (aliveNeighbours(x, y, universeSize) == 3) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        }
                    }
                    .all { it }
        }

        fun aliveNeighbours(x: Int, y: Int, universeSize: Int): Int {
            var north = x - 1
            if (north < 0) north = universeSize - 1
            var south = x + 1
            if (south > universeSize - 1) south = 0
            var west = y - 1
            if (west < 0) west = universeSize - 1
            var east = y + 1
            if (east > universeSize - 1) east = 0

            var aliveNeighbours = 0
            if (map[north][west].isAlive()) ++aliveNeighbours
            if (map[north][y].isAlive()) ++aliveNeighbours
            if (map[north][east].isAlive()) ++aliveNeighbours
            if (map[x][west].isAlive()) ++aliveNeighbours
            if (map[x][east].isAlive()) ++aliveNeighbours
            if (map[south][west].isAlive()) ++aliveNeighbours
            if (map[south][y].isAlive()) ++aliveNeighbours
            if (map[south][east].isAlive()) ++aliveNeighbours

            return aliveNeighbours
        }

        fun Char.isAlive(): Boolean = this != ' '
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |-
    package life;

    import java.util.Random;

    class Universe {
        protected int N;
        protected int S;
        public static char[][] arr_curr;
        public static char[][] arr_next;

        public Universe(int N, int S) {
            this.N = N;
            this.S = S;
        }

        public void CreateUniverse(int N, int S) {
            Random random = new Random(S);
            arr_curr = new char[N][N];
            arr_next = new char[N][N];
            for(int i = 0; i < N; i++) {
                for(int j = 0; j < N; j++) {
                    if(random.nextBoolean()) {
                        arr_curr[i][j] = 'O';
                    }
                    else {
                        arr_curr[i][j] = ' ';
                    }
                }
            }
        }

        public void printUniverse(char[][] arr) {
            for(int i = 0; i < N; i++) {
                for(int j = 0; j < N; j++) {
                    System.out.print(arr[i][j]);
                }
                System.out.println();
            }
        }

        public void loop (int n) {
            if (n == 0) {
                printUniverse(arr_curr);
            }
            else {
                for (int i = 0; i < n; i++) {
                    Algorithm.Algo(arr_curr, arr_next);
                    swap();
                }
                printUniverse(arr_next);
            }
        }
        public void swap(){
            for(int i = 0; i < N; i++) {
                System.arraycopy(arr_next[i], 0, arr_curr[i], 0, N);
            }
        }
    }
  learner_created: true
- name: src/life/Algorithm.java
  visible: true
  text: |
    package life;

    public class Algorithm {
        public static char N;
        public static char S;
        public static char E;
        public static char W;
        public static char NW;
        public static char NE;
        public static char SW;
        public static char SE;

        public static void Algo(char[][] array, char[][] next) {
            for(int i = 0; i < array.length; i++){
                int cnt = 0;
                for(int j = 0; j < array.length; j++) {
                    Check(array, i, j);
                    cnt = Decision();
                    //System.out.print(cnt + " ");
                    if(array[i][j] == 'O') {
                        if(cnt < 2 || cnt > 3) {
                            next[i][j] = ' ';
                        }
                        else {
                            next[i][j] = 'O';
                        }
                    }
                    else {
                        if(cnt == 3) {
                            next[i][j] = 'O';
                        }
                        else {
                            next[i][j] = ' ';
                        }
                    }
                }
            }
        }

        public static void Check(char[][] array, int i, int j) {
            if(i == 0) {
                if(j == 0) {
                    N = array[array.length - 1][0];
                    NE = array[array.length - 1][1];
                    E = array[0][1];
                    S = array[1][0];
                    SE = array[1][1];
                    W = array[0][array.length - 1];
                    SW = array[1][array.length - 1];
                    NW = array[array.length - 1][array.length - 1];
                }
                else {
                    if(j == array.length - 1) {
                        N = array[array.length - 1][array.length - 1];
                        NW = array[array.length - 1][array.length - 2];
                        NE = array[array.length -1][0];
                        E = array[0][0];
                        SE = array[1][0];
                        W = array[0][array.length - 2];
                        SW = array[1][array.length - 2];
                        S = array[1][array.length - 1];
                    }
                    else {
                        N = array[array.length - 1][j];
                        NW = array[array.length - 1][j -1];
                        NE = array[array.length - 1][j + 1];
                        W = array[i][j - 1];
                        E = array[i][j + 1];
                        SW = array[i + 1][j - 1];
                        S = array[i + 1][j];
                        SE = array[i + 1][j + 1];
                    }
                }
            }
            else {
                if(i == array.length - 1) {
                    if(j == 0) {
                        N = array[array.length - 2][0];
                        NE = array[array.length - 2][1];
                        E = array[array.length - 1][1];
                        W = array[array.length - 1][array.length - 1];
                        NW = array[array.length - 2][array.length - 1];
                        S = array[0][0];
                        SE = array[0][1];
                        SW = array[0][array.length - 1];
                    }
                    else {
                        if(j == array.length - 1) {
                            N = array[array.length - 2][array.length - 1];
                            NW = array[array.length - 2][array.length - 2];
                            W = array[array.length - 1][array.length - 2];
                            NE = array[array.length - 2][0];
                            E = array[array.length - 1][0];
                            SE = array[0][0];
                            SW = array[0][array.length - 2];
                            S = array[0][array.length - 1];
                        }
                        else {
                            NW = array[array.length - 2][j - 1];
                            N = array[array.length - 2][j];
                            NE = array[array.length - 2][j + 1];
                            W = array[array.length - 1][j - 1];
                            E = array[array.length - 1][j + 1];
                            SW = array[0][j - 1];
                            S = array[0][j];
                            SE = array[0][j + 1];
                        }
                    }
                }
                else {
                    if(j == 0) {
                        N = array[i - 1][j];
                        NE = array[i - 1][j + 1];
                        E = array[i][j + 1];
                        SE = array[i + 1][j + 1];
                        S = array[i + 1][j];
                        NW = array[i - 1][array.length - 1];
                        W = array[i][array.length - 1];
                        SW = array[i + 1][array.length - 1];
                    }
                    else {
                        if(j == array.length - 1) {
                            N = array[i - 1][j];
                            S = array[i + 1][j];
                            SW = array[i + 1][j - 1];
                            W = array[i][j - 1];
                            NW = array[i - 1][j - 1];
                            NE = array[i - 1][0];
                            E = array[i][0];
                            SE = array[i + 1][0];
                        }
                        else {
                            N = array[i - 1][j];
                            NE = array[i - 1][j + 1];
                            E = array[i][j + 1];
                            SE = array[i + 1][j + 1];
                            S = array[i + 1][j];
                            SW = array[i + 1][j - 1];
                            W = array[i][j - 1];
                            NW = array[i - 1][j - 1];
                        }
                    }
                }
            }
        }

        public static int Decision() {
            int count = 0;
            if(N == 'O') {
                count++;
            }
            if(S == 'O') {
                count++;
            }
            if(E == 'O') {
                count++;
            }
            if(W == 'O') {
                count++;
            }
            if(NW == 'O') {
                count++;
            }
            if(NE == 'O') {
                count++;
            }
            if(SW == 'O') {
                count++;
            }
            if(SE == 'O') {
                count++;
            }
            return count;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/296/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/54/stages/296/implement">JetBrains
    Academy</a>
  time: Sat, 08 Aug 2020 14:22:46 UTC
record: 3
